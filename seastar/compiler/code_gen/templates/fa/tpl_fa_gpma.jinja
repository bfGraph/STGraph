extern "C" __global__ void {{kernel_name}}(
  {%for arg in args%}{{arg.type}} {{'*' if arg.is_ptr}}{{arg.name}}, {% endfor %}
  unsigned int *row_offsets,
  unsigned int *eids,
  unsigned long long *column_indices,
  {{index_type}} num_nodes,
  {{index_type}} max_dimx,
  {{index_type}} max_dimy,
  {{index_type}} thrs_per_group,
  {{index_type}} nodes_per_block) {

    {{index_type}} {{row_offset}} = nodes_per_block*blockIdx.x + threadIdx.x/thrs_per_group;

    if ({{row_offset}} < num_nodes) {

        {{index_type}} feat_len = max_dimx * max_dimy;
        unsigned int beg = __ldg(row_offsets + {{row_offset}});
        unsigned int end = __ldg(row_offsets + {{row_offset}} + 1);
        {{index_type}} tx = threadIdx.x % thrs_per_group;

        for (; tx<feat_len; tx+=blockDim.x) {

            {%for agg_stmt in aggs%}{{agg_stmt.init}}{%endfor%}
            {{init_outter_offset}}

            for ({{index_type}} e=beg;e<end;++e) {

                unsigned long long {{col_index}} = __ldg(column_indices + e);

                // GPMA indexes edges starting from 1
                // Seastar requires edgs to be indexed from 0
                double eid = __ldg(eids + e) - 1;
                
                unsigned long long mask = (unsigned long long){{row_offset}} << 32;
                unsigned int dst_check = ({{col_index}} - mask);
                {{col_index}} = ({{col_index}} - mask);

                if(dst_check != 0xFFFFFFFF && eid != 0){
                    {{init_inner_offset}}

                    {%for edge_stmt in edges%}
                    {{edge_stmt.load}}
                    {{edge_stmt.compute}}
                    {{edge_stmt.inner_write}}
                    {%endfor%}

                    {%for agg_stmt in aggs%}
                    {{agg_stmt.compute}}
                    {{agg_stmt.inner_write}}
                    {%endfor%}    
                }
            }

            {%for agg_stmt in aggs%}
            {{agg_stmt.outter_write}}
            {%endfor%}

            {%for node_stmt in nodes%}
            {{node_stmt.load}}
            {{node_stmt.compute}}
            {{node_stmt.inner_write}}
            {%endfor%}
        }
    }
}